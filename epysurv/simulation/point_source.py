import rpy2.robjects.packages as rpackages
import pandas as pd

from rpy2 import robjects

surveillance = rpackages.importr("surveillance")


def simulate_outbreaks(
    K,
    p=0.99,
    r=0.01,
    length=100,
    A=1,
    alpha=1,
    beta=0,
    phi=0,
    frequency=1,
    state=robjects.NULL,
):
    """Simulation of epidemics which were introduced by point sources.

    The basis of this programme is
    a combination of a Hidden Markov Model (to get random timepoints for outbreaks) and a simple
    model (compare seasonal_noise.py) to simulate the baseline.

    Attributes
    ----------
    p
        probability to get a new outbreak at time i if there was one at time i-1, default 0.99.
    r
        probability to get no new outbreak at time i if there was none at time i-1, default 0.01.
    length
        number of weeks to model, default 400. length is ignored if state is given. In this case the length of state is
        used.
    A
        amplitude (range of sinus), default = 1.
    alpha
        parameter to move along the y-axis (negative values not allowed) with alpha >= A, default = 1.
    beta
        regression coefficient, default = 0.
    phi
        factor to create seasonal moves (moves the curve along the x-axis), default = 0.
    frequency
        factor to determine the oscillation-frequency, default = 1.
    state
        use a state chain to define the status at this timepoint (outbreak or not).  If not given a Markov chain is
        generated by the programme, default NULL.
    K
        additional weight for an outbreak which influences the distribution parameter mu, default = 0.

    Returns
    -------
    pandas.DataFrame
    """
    simulated = surveillance.sim_pointSource(
        p=p,
        r=r,
        length=length,
        A=A,
        alpha=alpha,
        beta=beta,
        phi=phi,
        frequency=frequency,
        state=state,
        K=K,
    )
    simulated = dict(zip(simulated.names, list(simulated)))
    return pd.DataFrame(
        {"observed": list(simulated["observed"]), "state": list(simulated["state"])}
    )
