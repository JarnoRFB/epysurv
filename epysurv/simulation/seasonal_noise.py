from dataclasses import dataclass
from typing import Optional, Sequence

import pandas as pd
import rpy2.robjects.packages as rpackages
from rpy2 import robjects

from epysurv.simulation.base import BaseSimulation
from epysurv.simulation.utils import add_date_time_index_to_frame, r_list_to_frame

surveillance = rpackages.importr("surveillance")


@dataclass
class SeasonalNoise(BaseSimulation):
    """Generation of a cyclic model of a Poisson distribution as background data for a simulated timevector.

    The mean of the Poisson distribution is modelled as:
    :math:`\\mu = \\exp{(amplitude\\sin{(frequency \\cdot (t + \\phi))} + \\alpha + \\beta * week_t + K * state)}`
    with :math:`\\omega = \\pi / 52`

    Attributes
    ----------
    amplitude
        amplitude (range of sinus), default = 1.
    alpha
        parameter to move along the y-axis (negative values not allowed) with alpha >= amplitude, default = 1.
    beta
        regression coefficient, default = 0.
    phi
        factor to create seasonal moves (moves the curve along the x-axis), default = 0.
    frequency
        factor to determine the oscillation-frequency, default = 1.
    seed
        a seed for the random number generation


    References
    ----------
    http://surveillance.r-forge.r-project.org/
    """

    alpha: float = 1.0
    amplitude: float = 1.0
    beta: float = 0.0
    frequency: int = 1
    phi: int = 0
    seed: Optional[int] = None

    def simulate(
        self,
        length: int,
        state_weight: Optional[float] = None,
        state: Optional[Sequence[int]] = None,
    ) -> pd.DataFrame:
        """
        Parameters
        -------
        length
            number of weeks to model, default 100. length is ignored if state is given. In this case the length of state
            is used.
        state
            use a state chain to define the status at this timepoint (outbreak or not).  If not given, a Markov chain is
            generated by the programme, default None.
        state_weight
            additional weight for an outbreak which influences the distribution parameter mu, default = 0.

        Returns
        -------
        A DataFrame of an endemic time series that contains n weeks where n=``length``.
        Each row in the DataFrame's represents one timesteps where each step is equivalent to one calender week.
        It contains a ``mean`` column which is the mean case count according to the sinus based model.
        And finally, it contains a column ``n_cases`` that consists of the generates case counts
        based on the sinus model
        """
        if self.seed:
            base = robjects.packages.importr("base")
            base.set_seed(self.seed)
        simulated = surveillance.sim_seasonalNoise(
            A=self.amplitude,
            alpha=self.alpha,
            beta=self.beta,
            phi=self.phi,
            length=length,
            frequency=self.frequency,
            state=robjects.NULL if state is None else robjects.IntVector(state),
            K=robjects.NULL if state_weight is None else state_weight,
        )

        simulated = r_list_to_frame(simulated, ["mu", "seasonalBackground"])
        simulated = (
            simulated.pipe(add_date_time_index_to_frame)
            .rename(columns={"mu": "mean", "seasonalBackground": "n_cases"})
            .assign(n_outbreak_cases=0)
        )
        return simulated
